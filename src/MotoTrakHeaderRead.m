function data = MotoTrakHeaderRead(file)

%
%MOTOTRAKHEADERREAD.m - Vulintus, Inc., 2017.
%
%   MOTOTRAKHEADERREAD reads in behavioral session data from MotoTrak
%   *.MotoTrak data files and loads it into a MATLAB structure for
%   analysis. The *.MotoTrak data files are generated by the C# version
%   MotoTrak 2.0 program and use file version -5.
%
%   UPDATE LOG:
%   04/17/2017 - Drew Sloan - Function first created.
%

%Create an empty structure for the data
data = [];

%Open the MotoTrak file
fid = fopen(file, 'r');

%Rewind to the beginning of the file
fseek(fid, 0, -1);

%Get the file version
version = fread(fid, 1, 'int8');

if (version == -5 || version == -6)
    
    %If the file version is -5, then go ahead and attempt to read it
    data.version = version;
    
    %Read the session start time
    data.starttime = fread(fid, 1, 'float64');
    
    %Read the number of characters in the rat name
    N = fread(fid, 1, 'uint8');
    
    %Read the rat name
    data.subject = fread(fid, N, '*char')';
    
    %Read the number of characters in the booth name
    N = fread(fid, 1, 'uint8');
    
    %Read the booth name
    data.booth = fread(fid, N, '*char')';
    
    %Read the number of characters in the stage title
    N = fread(fid, 1, 'uint8');
    
    %Read the stage title
    data.stage = fread(fid, N, '*char')';
    
    %Read the number of characters in the device name
    N = fread(fid, 1, 'uint8');
    
    %Read the device name
    data.device = fread(fid, N, '*char')';
    
    %Read the number of calibration coefficients that exist
    N = fread(fid, 1, 'uint8');
    
    %Read in each calibration coefficient
    data.calibration_coefficients = fread(fid, N, '*float32');
    
    %Read in the number of streams that exist in this data file
    N = fread(fid, 1, 'uint8');
    
    %Read in the metadata for each data stream
    data.data_streams = struct('stream_description', {}, 'stream_units', {});
    for i = 1:N
        %Load in the description of each stream
        n_descr = fread(fid, 1, 'uint8');
        descr = fread(fid, n_descr, '*char')';
        
        %Load in the units for each stream
        n_units = fread(fid, 1, 'uint8');
        units = fread(fid, n_units, '*char')';
        
        %Save the data stream metadata to our structure
        new_stream.stream_description = descr;
        new_stream.stream_units = units;
        data.data_streams(end+1) = new_stream;
    end
    
    number_of_streams = length(data.data_streams);
    
    %Read in the number of quantitative stage parameters that exist for this session
    N = fread(fid, 1, 'uint32');
    
    %Read in the stage parameters for this stage
    data.parameters = {};
    for i = 1:N
        n_param_name = fread(fid, 1, 'uint8');
        param_name = fread(fid, n_param_name, '*char')';
        data.parameters{end+1} = param_name;
    end
    
    %Read in the number of nominal stage parameters that exist for this session
    data.nominal_parameters = {};
    
    %Nominal parameters only exist for file version -6 and later.  Not for -5.
    if (version == -6)
        
        %Read in the number of nominal parameters
        N = fread(fid, 1, 'uint32');
        
        %Read in the name of each nominal parameter
        for i = 1:N
            n_param_name = fread(fid, 1, 'uint8');
            param_name = fread(fid, n_param_name, '*char')';
            data.nominal_parameters{end+1} = param_name;
        end
        
    end
    
else
    %If the version doesn't equal -5, print an error message and exit this
    %function
    disp('Incorrect file version.  We cannot read this file.');
    return;
end

fclose(fid);                                                                %Close the data file.